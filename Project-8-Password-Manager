# Import the necessary modules for encryption and password generation
from cryptography.fernet import Fernet  # For encryption and decryption
import random  # For random password generation
import string  # For defining the characters used in password generation

def generate_key():
    """
    Generates a random key for encryption/decryption.
    This key is essential for both encrypting and decrypting the data.
    """
    key = Fernet.generate_key()  # Create a new encryption key
    return key  # Return the generated key

def encrypt_data(data, key):
    """
    Encrypts data using the provided key.
    
    Parameters:
    data (str): The data to encrypt, provided as a string.
    key (bytes): The encryption key, must be in bytes format.
    
    Returns:
    bytes: The encrypted data in bytes.
    """
    fernet = Fernet(key)  # Initialize the Fernet class with the given key
    encrypted_data = fernet.encrypt(data.encode())  # Encrypt the data, converting it to bytes
    return encrypted_data  # Return the encrypted data

def decrypt_data(encrypted_data, key):
    """
    Decrypts data using the provided key.
    
    Parameters:
    encrypted_data (bytes): The encrypted data to decrypt, in bytes.
    key (bytes): The encryption key, must be in bytes format.
    
    Returns:
    str: The decrypted data as a string.
    """
    fernet = Fernet(key)  # Initialize the Fernet class with the given key
    decrypted_data = fernet.decrypt(encrypted_data).decode()  # Decrypt the data, converting it back to a string
    return decrypted_data  # Return the decrypted data

def generate_password(length=16):
    """
    Generates a secure random password of specified length.
    
    Parameters:
    length (int): The length of the password to generate. Default is 16.
    
    Returns:
    str: The generated password as a string.
    """
    # Define the characters to be used in the password
    characters = string.ascii_letters + string.digits + string.punctuation  
    # Generate a random password using the defined characters
    password = ''.join(random.choice(characters) for i in range(length))  
    return password  # Return the generated password

def save_data(data, filename, key):
    """
    Saves encrypted data to a file.
    
    Parameters:
    data (str): The data to save, provided as a string.
    filename (str): The name of the file where data will be saved.
    key (bytes): The encryption key used to encrypt the data.
    
    Returns:
    None
    """
    try:
        with open(filename, 'wb') as f:  # Open the file in binary write mode
            encrypted_data = encrypt_data(data, key)  # Encrypt the data
            f.write(encrypted_data)  # Write the encrypted data to the file
    except FileNotFoundError:  # Handle the error if the file is not found
        print("Error: File not found!")  # Print an error message

def load_data(filename, key):
    """
    Loads and decrypts data from a file.
    
    Parameters:
    filename (str): The name of the file from which to load data.
    key (bytes): The encryption key used to decrypt the data.
    
    Returns:
    str: The decrypted data as a string.
    """
    try:
        with open(filename, 'rb') as f:  # Open the file in binary read mode
            encrypted_data = f.read()  # Read the encrypted data from the file
            data = decrypt_data(encrypted_data, key)  # Decrypt the data
            return data  # Return the decrypted data
    except FileNotFoundError:  # Handle the error if the file is not found
        print("Error: File not found!")  # Print an error message

# Example usage:
# Generating an encryption key
key = generate_key()

# Encrypting and saving data
data_to_save = "This is a secret message."
save_data(data_to_save, "encrypted_file.dat", key)

# Loading and decrypting data
retrieved_data = load_data("encrypted_file.dat", key)
print(retrieved_data)  # Should print: This is a secret message.

# Generating a secure password
password = generate_password(16)
print(password)  # Should print a randomly generated 16-character password.
