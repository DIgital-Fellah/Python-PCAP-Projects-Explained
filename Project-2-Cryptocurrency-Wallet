# Import necessary library for making HTTP requests
import requests

# Define a custom exception class for errors related to the CryptoWallet
class WalletError(Exception):
    pass

class CryptoWallet:
    """
    This class represents a cryptocurrency wallet to manage multiple currencies.

    Attributes:
        balances (dict): A dictionary to store cryptocurrency balances (currency: amount).
        api_keys (dict): A dictionary to store API keys for different exchanges (exchange: key).
    """

    def __init__(self):
        """
        Initializes a new CryptoWallet instance with empty balances and API keys.
        """
        # Initialize an empty dictionary to hold the balance of each cryptocurrency
        self.balances = {}
        # Initialize an empty dictionary to hold the API keys for different exchanges
        self.api_keys = {}

    def add_currency(self, currency):
        """
        Adds a new currency to the wallet with a zero balance.

        Args:
            currency (str): The name of the cryptocurrency (e.g., "BTC", "ETH").

        Raises:
            WalletError: If the currency already exists in the wallet.
        """
        # Check if the currency already exists in the wallet
        if currency in self.balances:
            # Raise an error if the currency is already present
            raise WalletError(f"Currency '{currency}' already exists in the wallet.")
        # Add the currency with a zero balance
        self.balances[currency] = 0

    def get_balance(self, currency):
        """
        Returns the current balance for a specific currency.

        Args:
            currency (str): The name of the cryptocurrency.

        Returns:
            float: The current balance for the specified currency.

        Raises:
            WalletError: If the currency does not exist in the wallet.
        """
        # Check if the currency exists in the wallet
        if currency not in self.balances:
            # Raise an error if the currency is not found
            raise WalletError(f"Currency '{currency}' not found in the wallet.")
        # Return the balance of the specified currency
        return self.balances[currency]

    def set_api_key(self, exchange, api_key):
        """
        Sets the API key for a specific cryptocurrency exchange.

        Args:
            exchange (str): The name of the cryptocurrency exchange (e.g., "Binance", "Coinbase").
            api_key (str): The API key for the exchange.
        """
        # Store the API key for the specified exchange
        self.api_keys[exchange] = api_key

    def get_price(self, currency, exchange="default"):
        """
        Fetches the current price of a cryptocurrency from an exchange API.

        This function uses a placeholder 'default' exchange. You'll need to implement
        logic to handle different exchanges based on your API keys.

        Args:
            currency (str): The name of the cryptocurrency.
            exchange (str, optional): The name of the cryptocurrency exchange. Defaults to "default".

        Returns:
            float: The current price of the cryptocurrency.

        Raises:
            WalletError: If the API key is not set for the specified exchange.
        """
        # Check if the API key for the specified exchange is set
        if exchange not in self.api_keys:
            # Raise an error if the API key is not set
            raise WalletError(f"API key not set for exchange '{exchange}'.")

        # Placeholder code for fetching the price from an API
        # In a real implementation, you would make an API request to get the current price
        return 100.0  # Placeholder price for demonstration

    def deposit(self, currency, amount):
        """
        Simulates a deposit of a specific currency into the wallet.

        **Note:** This function doesn't interact with any real blockchain or exchange.

        Args:
            currency (str): The name of the cryptocurrency.
            amount (float): The amount of currency to deposit.

        Raises:
            WalletError: If the currency does not exist in the wallet or the amount is negative.
        """
        # Check if the currency exists in the wallet
        if currency not in self.balances:
            # Raise an error if the currency is not found
            raise WalletError(f"Currency '{currency}' not found in the wallet.")
        # Check if the deposit amount is positive
        if amount <= 0:
            # Raise an error if the deposit amount is negative or zero
            raise WalletError("Deposit amount must be positive.")
        # Add the deposit amount to the balance of the specified currency
        self.balances[currency] += amount

    def withdraw(self, currency, amount):
        """
        Simulates a withdrawal of a specific currency from the wallet.

        **Note:** This function doesn't interact with any real blockchain or exchange.

        Args:
            currency (str): The name of the cryptocurrency.
            amount (float): The amount of currency to withdraw.

        Raises:
            WalletError: If the currency does not exist in the wallet, the amount is negative,
                         or the withdrawal exceeds the current balance.
        """
        # Check if the currency exists in the wallet
        if currency not in self.balances:
            # Raise an error if the currency is not found
            raise WalletError(f"Currency '{currency}' not found in the wallet.")
        # Check if the withdrawal amount is positive
        if amount <= 0:
            # Raise an error if the withdrawal amount is negative or zero
            raise WalletError("Withdrawal amount must be positive.")
        # Check if there are sufficient funds for the withdrawal
        if self.balances[currency] < amount:
            # Raise an error if there are insufficient funds
            raise WalletError("Insufficient funds for withdrawal.")
        # Subtract the withdrawal amount from the balance of the specified currency
        self.balances[currency] -= amount
