import random  # Import the random module for simulating measurement probabilities
import numpy as np  # Import numpy for handling complex number calculations
from math import sqrt  # Import sqrt from math for Hadamard gate calculations

class Qubit:
    """Represents a single quantum bit (qubit)."""

    def __init__(self):
        # Initialize the qubit state to |0> (which is represented by complex(1, 0))
        self.state = complex(1, 0)  # Initial state: |0> (plus sign)

    def __str__(self):
        """Return a string representation of the qubit state."""
        alpha = self.state.real  # The real part of the complex number (probability amplitude for |0>)
        beta = self.state.imag  # The imaginary part of the complex number (probability amplitude for |1>)
        return f"alpha: {alpha:.4f}, beta: {beta:.4f}"

    def measure(self):
        """Simulates a measurement of the qubit, returning 0 or 1."""
        p_zero = abs(self.state.real) ** 2  # Probability of measuring |0>
        # Use a random number to determine the measurement outcome
        if random.random() < p_zero:
            self.state = complex(1, 0)  # Collapse to |0> if measured as 0
            return 0
        else:
            self.state = complex(0, 1)  # Collapse to |1> if measured as 1
            return 1


def apply_gate(gate, qubit1, qubit2=None):
    """Applies a quantum gate to one or two qubits."""
    if gate == "H":
        # Hadamard gate transformation matrix
        H = [[1/sqrt(2), 1/sqrt(2)], [1/sqrt(2), -1/sqrt(2)]]
        # Apply Hadamard gate to qubit1
        new_state = np.dot(H, np.array([qubit1.state, 0j]))
        qubit1.state = new_state[0]  # Update the state of qubit1
    elif gate == "CNOT":
        # Controlled-NOT gate (requires two qubits)
        if qubit2 is None:
            raise ValueError("CNOT gate requires two qubits")
        control = qubit1.state  # State of the control qubit
        target = qubit2.state  # State of the target qubit
        # Update the states based on the CNOT operation
        new_control = target * control
        new_target = control * np.conjugate(target) + (1 - abs(control) ** 2) * target
        qubit1.state = new_control
        qubit2.state = new_target
    else:
        raise ValueError(f"Unsupported gate: {gate}")


def ghz_experiment(n):
    """Simulates the Greenberger-Horne-Zeilinger (GHZ) experiment with n qubits."""
    # Create a list of n qubits initialized to |0>
    qubits = [Qubit() for _ in range(n)]
    # Apply Hadamard gate to the first qubit
    apply_gate("H", qubits[0])
    # Apply CNOT gates between the first qubit and each of the other qubits
    for i in range(1, n):
        apply_gate("CNOT", qubits[0], qubits[i])
    # Measure all qubits and store the results
    measurements = [q.measure() for q in qubits]
    print(f"Measured states: {measurements}")
    # Check if all measurements are the same (indicating correlation)
    return all(m == measurements[0] for m in measurements[1:])


# Example usage: Run GHZ experiment with 3 qubits
ghz_experiment(3)

# Further development:
# - Implement more quantum gates (e.g., X, Y, Z, etc.)
# - Build quantum circuits with sequences of gates
# - Simulate simple quantum algorithms
